type Action = 1 | 2 | 3 | 4 | 5 | 6;

type RoundLog = {
  round: number;
  move: Action;
  damage: number;
};

const damageTable: Record<string, number> = {
  "1-1": 10,
  "1-2": -10,
  "1-3": 10,
  "1-4": 10,
  "1-5": 10,
  "1-6": 10,

  "2-1": 10,
  "2-2": 0,
  "2-3": 0,
  "2-4": 0,
  "2-5": 0,
  "2-6": 0,

  "3-1": 10,
  "3-2": 10,
  "3-3": 10,
  "3-4": -10,
  "3-5": 10,
  "3-6": 10,

  "4-1": 0,
  "4-2": 0,
  "4-3": 10,
  "4-4": 0,
  "4-5": 0,
  "4-6": 0,

  "5-1": 10,
  "5-2": 10,
  "5-3": 10,
  "5-4": 10,
  "5-5": 10,
  "5-6": -10,

  "6-1": 0,
  "6-2": 0,
  "6-3": 0,
  "6-4": 0,
  "6-5": 10,
  "6-6": 0,
};

export type BattleResult = {
  rounds: {
    player1: RoundLog;
    player2: RoundLog;
  }[];
  player1Score: number;
  player2Score: number;
  winner: "player1" | "player2" | "draw";
};

export function simulateBattle(combo1: string, combo2: string): BattleResult {
  const actions1 = combo1.split("").map((c) => Number(c) as Action);
  const actions2 = combo2.split("").map((c) => Number(c) as Action);

  const rounds: BattleResult["rounds"] = [];
  let score1 = 0;
  let score2 = 0;

  for (let i = 0; i < 6; i++) {
    const a1 = actions1[i];
    const a2 = actions2[i];

    const key1 = `${a1}-${a2}`;
    const key2 = `${a2}-${a1}`;

    const d1 = damageTable[key1] ?? 0;
    const d2 = damageTable[key2] ?? 0;

    score1 += d1;
    score2 += d2;

    rounds.push({
      player1: {
        round: i + 1,
        move: a1,
        damage: d1,
      },
      player2: {
        round: i + 1,
        move: a2,
        damage: d2,
      },
    });
  }

  let winner: "player1" | "player2" | "draw" = "draw";
  if (score1 > score2) winner = "player1";
  else if (score2 > score1) winner = "player2";

  return {
    rounds,
    player1Score: score1,
    player2Score: score2,
    winner,
  };
}

const commandMap: Record<Action, string> = {
  1: "–≤–∫–ª—é—á–∏–ª –æ–ø–ø—É –º–∞–∫–∞–Ω–∞",
  2: "–Ω–∞–¥–µ–ª –±–µ—Ä—É—à–∏",
  3: "–≤—ä–µ–±–∞–ª —Å–æ —Å–ø–∏–Ω—ã",
  4: "—Ä–µ–∑–∫–æ –æ–±–µ—Ä–Ω—É–ª—Å—è",
  5: "–¥–æ–Ω–µ—Å –ú–∏–∑—É–ª–∏–Ω–æ–π",
  6: "—É–ª–µ—Ç–µ–ª –≤ –î—É–±–∞–π",
};

const outcomeMap: Record<string, string> = {
  "1-1": "–ü–æ—á–µ–º—É —Ç–∞–∫ –∫–∞—á–∞–µ—Ç? –ê–∞–∞ –µ—Ç–æ –º–∞–∫–∞–Ω",
  "1-2": "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–Ω–∏–≥—É –ø—Ä–æ—á–∏—Ç–∞–ª–∏",
  "1-3": "–†–∞–∑–º–µ–Ω",
  "1-4": "–û–Ω —è–≤–Ω–æ —á—Ç–æ-—Ç–æ –∑–Ω–∞–ª",
  "1-5": "–ò —á–µ –¥–µ–ª–∞—Ç—å",
  "1-6": "–û–Ω –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª",

  "2-1": "–ú–ê–ö–ê–ù - –í –° –ï",
  "2-2": "–ú–∞–∫–∞–Ω–∞ —Ç—É—Ç –Ω–µ—Ç",
  "2-3": "–ê –º–æ–≥ –≤–µ–¥—å —É—Å–ª—ã—à–∞—Ç—å",
  "2-4": "–î–æ–ø—É—Å—Ç–∏–º..",
  "2-5": "–ù–∞–¥–æ –±—ã–ª–æ –≤ –î—É–±–∞–π..",
  "2-6": "–õ–∞–¥–Ω–æ..",

  "3-1": "–†–∞–∑–º–µ–Ω",
  "3-2": "–Å–±–Ω—É–ª –æ–ø–ø—É, –æ–Ω –±—ã–ª –≤ –±–∏—Ä–∫–µ–Ω—à—Ç–æ–∫–∞—Ö",
  "3-3": "–í—Å—Ç—Ä–µ—Ç–ª–∏—Å—å –∫–∞–∫-—Ç–æ –¥–≤–∞ —Ñ–∞–Ω–∞—Ç–∞ –æ–±–ª—ã",
  "3-4": "–ë—Ä–æ, –ø–æ–¥—É—á–∏—Å—å —É –æ–±–ª—ã –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è",
  "3-5": "–ü–æ–±–µ–∂–∞–ª –∂–∞–ª–æ–≤–∞—Ç—å—Å—è..",
  "3-6": "–ü–æ–ª—É—á–∏–ª –ø–∏–∑–¥—ã –ø—Ä—è–º –Ω–∞ —Ç—Ä–∞–ø–µ",

  "4-1": "–ß—Ç–æ–± –ª—É—á—à–µ —Ä–∞—Å—Å–ª—ã—à–∞—Ç—å",
  "4-2": "–î–æ–ø—É—Å—Ç–∏–º..",
  "4-3": "–û–±–ª–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω",
  "4-4": "–ü–æ—Å–æ—Å–∏—Ç–µ—Å—å —Ç–µ–ø–µ—Ä—å –µ–ø—Ç–∞",
  "4-5": "–ó–∞ —á—Ç–æ",
  "4-6": "–õ–∞–¥–Ω–æ..",

  "5-1": "–ù—É –∞ —Ö—É–ª–∏ –æ–Ω",
  "5-2": "–ü–∏–∑–¥–∞ –µ–º—É",
  "5-3": "–ü–æ–±–µ–∂–∞–ª –∂–∞–ª–æ–≤–∞—Ç—å—Å—è..",
  "5-4": "–ó–∞ —á—Ç–æ",
  "5-5": "+2 –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞",
  "5-6": "–ü–∞—Å–∞—Å–∞–ª",

  "6-1": "–í–µ—Å—å –ø–æ–ª–µ—Ç –∏–≥—Ä–∞–ª BRATLAND",
  "6-2": "–õ–∞–¥–Ω–æ..",
  "6-3": "–ü–æ–ª—É—á–∏–ª –ø–∏–∑–¥—ã –ø—Ä—è–º –Ω–∞ —Ç—Ä–∞–ø–µ",
  "6-4": "–õ–∞–¥–Ω–æ..",
  "6-5": "–ë–∏–≥ –±–æ–π –ê–±—É –î–∞–±–∏",
  "6-6": "–ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ö—É–π —ç—Ç–∏ –±–∞—Ç—Ç–ª—ã",
};

export function formatResult(
  result: BattleResult,
  player: "player1" | "player2"
): string[] {
  const lines: string[] = ["üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—Ç–ª–∞"];
  const opponent = player === "player1" ? "player2" : "player1";

  for (let i = 0; i < result.rounds.length; i++) {
    const { [player]: self, [opponent]: enemy } = result.rounds[i];
    const key = `${self.move}-${enemy.move}`;

    lines.push(
      [
        `–†–∞—É–Ω–¥ ${i + 1}:`,
        `–¢—ã ${commandMap[self.move]}, –æ–ø–ø–æ–Ω–µ–Ω—Ç ‚Äî ${commandMap[enemy.move]}\n`,
        `üìØ ${self.damage} | ${enemy.damage}`,
        `üí¨ ${outcomeMap[key]}`,
      ].join("\n")
    );
  }

  const scoreLine = `üèÅ –°—á—ë—Ç: ${result.player1Score} : ${result.player2Score}`;

  lines.push(`${scoreLine}`);

  return lines;
}
