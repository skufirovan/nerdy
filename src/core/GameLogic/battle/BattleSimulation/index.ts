type Action = 1 | 2 | 3 | 4;

type RoundLog = {
  round: number;
  move: Action;
  damage: number;
};

const damageTable: Record<string, number> = {
  "1-1": 10,
  "1-2": 10,
  "1-3": -10,
  "1-4": 10,

  "2-1": 8,
  "2-2": 8,
  "2-3": 8,
  "2-4": -8,

  "3-1": 10,
  "3-2": 0,
  "3-3": 0,
  "3-4": 0,

  "4-1": 0,
  "4-2": 8,
  "4-3": 0,
  "4-4": 0,
};

export type BattleResult = {
  rounds: {
    player1: RoundLog;
    player2: RoundLog;
  }[];
  player1Score: number;
  player2Score: number;
  winner: "player1" | "player2" | "draw";
};

export function simulateBattle(combo1: string, combo2: string): BattleResult {
  const actions1 = combo1.split("").map((c) => Number(c) as Action);
  const actions2 = combo2.split("").map((c) => Number(c) as Action);

  const rounds: BattleResult["rounds"] = [];
  let score1 = 0;
  let score2 = 0;

  for (let i = 0; i < 4; i++) {
    const a1 = actions1[i];
    const a2 = actions2[i];

    const key1 = `${a1}-${a2}`;
    const key2 = `${a2}-${a1}`;

    const d1 = damageTable[key1] ?? 0;
    const d2 = damageTable[key2] ?? 0;

    score1 += d1;
    score2 += d2;

    rounds.push({
      player1: {
        round: i + 1,
        move: a1,
        damage: d1,
      },
      player2: {
        round: i + 1,
        move: a2,
        damage: d2,
      },
    });
  }

  let winner: "player1" | "player2" | "draw" = "draw";
  if (score1 > score2) winner = "player1";
  else if (score2 > score1) winner = "player2";

  return {
    rounds,
    player1Score: score1,
    player2Score: score2,
    winner,
  };
}

const commandMap: Record<Action, string> = {
  1: "–≤–∫–ª—é—á–∏–ª –æ–ø–ø—É –º–∞–∫–∞–Ω–∞",
  2: "–≤—ä–µ–±–∞–ª —Å–æ —Å–ø–∏–Ω—ã",
  3: "–Ω–∞–¥–µ–ª –±–µ—Ä—É—à–∏",
  4: "—Ä–µ–∑–∫–æ –æ–±–µ—Ä–Ω—É–ª—Å—è",
};

const outcomeMap: Record<string, string> = {
  "1-1": "–ü–æ—á–µ–º—É —Ç–∞–∫ –∫–∞—á–∞–µ—Ç? –≠—Ç–æ –º–∞–∫–∞–Ω",
  "1-2": "–í–æ—Ç –∏ –¥—É–º–∞–π, –∫–æ–º—É —Ö—É–∂–µ..",
  "1-3": "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–Ω–∏–≥—É –ø—Ä–æ—á–∏—Ç–∞–ª–∏",
  "1-4": "–û–Ω —è–≤–Ω–æ —á—Ç–æ-—Ç–æ –∑–Ω–∞–ª",

  "2-1": "–í–æ—Ç –∏ –¥—É–º–∞–π, –∫–æ–º—É —Ö—É–∂–µ..",
  "2-2": "–í—Å—Ç—Ä–µ—Ç–ª–∏—Å—å –∫–∞–∫-—Ç–æ –¥–≤–∞ —Ñ–∞–Ω–∞—Ç–∞ –æ–±–ª—ã",
  "2-3": "–Å–±–Ω—É–ª –æ–ø–ø—É, –æ–Ω –±—ã–ª –≤ –±–∏—Ä–∫–µ–Ω—à—Ç–æ–∫–∞—Ö",
  "2-4": "–ë—Ä–æ, –ø–æ–¥—É—á–∏—Å—å —É –æ–±–ª—ã –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è",

  "3-1": "–° —Ç–∞–∫–æ–π —É–¥–∞—á–æ–π –Ω–∞–¥–æ –¥–µ–ø–∞—Ç—å —Å—Ä–æ—á–Ω–æ",
  "3-2": "–ó—Ä—è, –∞ –º–æ–≥ –≤–µ–¥—å —É—Å–ª—ã—à–∞—Ç—å",
  "3-3": "–ú–∞–∫–∞–Ω–∞ —Ç—É—Ç –Ω–µ—Ç",
  "3-4": "–î–æ–ø—É—Å—Ç–∏–º..",

  "4-1": "–ß—Ç–æ–± –ª—É—á—à–µ —Ä–∞—Å—Å–ª—ã—à–∞—Ç—å",
  "4-2": "–û–±–ª–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω",
  "4-3": "–î–æ–ø—É—Å—Ç–∏–º..",
  "4-4": "–ü–æ—Å–æ—Å–∏—Ç–µ—Å—å —Ç–µ–ø–µ—Ä—å –µ–ø—Ç–∞",
};

export function formatResult(
  result: BattleResult,
  player: "player1" | "player2"
): string[] {
  const lines: string[] = ["üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—Ç–ª–∞"];
  const opponent = player === "player1" ? "player2" : "player1";

  for (let i = 0; i < result.rounds.length; i++) {
    const { [player]: self, [opponent]: enemy } = result.rounds[i];
    const key = `${self.move}-${enemy.move}`;

    lines.push(
      [
        `–†–∞—É–Ω–¥ ${i + 1}:`,
        `–¢—ã ${commandMap[self.move]}, –æ–ø–ø–æ–Ω–µ–Ω—Ç ‚Äî ${commandMap[enemy.move]}\n`,
        `üìØ ${self.damage} | ${enemy.damage}`,
        `üí¨ ${outcomeMap[key]}`,
      ].join("\n")
    );
  }

  const scoreLine = `üèÅ –°—á—ë—Ç: ${result.player1Score} : ${result.player2Score}`;
  const verdict =
    result.winner === "draw"
      ? "üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® –ù–∏—á—å—è"
      : result.winner === player
      ? "üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª"
      : "ü´µüèø –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";

  lines.push(`${scoreLine}\n${verdict}`);

  return lines;
}
