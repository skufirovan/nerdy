import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { keyboards } from "@bot/markup/keyboards";
import UserController from "@controller/UserController";
import { validateNickname } from "@utils/index";

const chooseNicknameScene = new Scenes.BaseScene<Scenes.SceneContext>(
  "chooseNickname"
);

chooseNicknameScene.enter((ctx) => {
  ctx.reply(
    "üë®üèø‚Äçüè´ –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º. –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫–∞\n‚ûñ –ü–æ—Å–ø–µ—à–∏—à—å ‚Äì –æ–ø–ø–æ–≤ –Ω–∞—Å–º–µ—à–∏—à—å, –ø–æ–¥–æ–π–¥–∏ –∫ —ç—Ç–æ–º—É —Å —É–º–æ–º"
  );
});

chooseNicknameScene.on(message("text"), async (ctx) => {
  const nickname = ctx.message.text.trim();
  const accountId = (ctx.scene.state as { accountId: bigint }).accountId;

  const validation = validateNickname(nickname);
  if (!validation.isValid) {
    const errorMessages = {
      TOO_SHORT: "–ù–∏–∫ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä—è–º –∫–∞–∫ —Ç–≤–æ–π..",
      TOO_LONG: "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤)",
      CONTAINS_AT: "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª @",
      EMOJI: "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏",
      INVALID_CHARS: "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _-.,!?",
    };

    await ctx.reply(`‚ö†Ô∏è ${errorMessages[validation.error!]}\n‚ûñ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ`);
    return;
  }

  try {
    const existedUser = await UserController.getByNickname(nickname);

    if (existedUser) {
      await ctx.reply(
        `‚ùå –û–ø–ø—ã –±—ã–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ –∑–∞–Ω—è–ª–∏ —ç—Ç–æ—Ç –Ω–∏–∫, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç`
      );
      return;
    }

    await UserController.updateUserInfo(accountId, { nickname });

    await ctx.reply(`‚òÅÔ∏è –¢–µ–ø–µ—Ä—å –≤ —Å–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ`, keyboards.main);
    return ctx.scene.leave();
  } catch (error) {}
});

export default chooseNicknameScene;
