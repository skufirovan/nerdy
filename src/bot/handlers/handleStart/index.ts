import { MyContext, SessionData } from "@bot/features/scenes";
import { UserController } from "@controller";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";
import { mainKeyboard } from "./keyboard";
import { CHANNEL_LINK, SECTION_EMOJI } from "@utils/constants";

export const handleStart = async (ctx: MyContext) => {
  const accountId = ctx.user!.accountId;
  const username = ctx.user!.username;

  try {
    await ctx.reply(
      [
        `${SECTION_EMOJI} –¢—ã –≤ [NERDY](${CHANNEL_LINK}) ‚Äî –∏–≥—Ä–µ, –≥–¥–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø–æ–¥–Ω—è—Ç—å—Å—è —Å —Å–∞–º–æ–≥–æ –¥–Ω–∞ —Å–∫ –∞–π—Å–±–µ—Ä–≥–∞\n`,
        `‚ûñ –¢—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ ‚Äî –∑–∞–∫—É–ø–∞–π –æ–±–æ—Ä—É–¥–∫—É, –ø–∏—à–∏ –¥–µ–º–æ—á–∫–∏, –∑–∞–ø–∏—Å—ã–≤–∞–π –¥–∏—Å—Å—ã –Ω–∞ –ª–µ–π–º–æ–≤\n`,
        `‚ûñ –ü—É—Ç—å –Ω–µ –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º, –∑–∞–ø–æ–º–Ω–∏: –ø–µ—Ä–≤–∞—è –¥–µ–º–∫–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –∫–æ–º–æ–º\n`,
        `üìç–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${CHANNEL_LINK}`,
      ].join("\n"),
      {
        parse_mode: "Markdown",
        ...mainKeyboard,
      }
    );

    let user = await UserController.findByAccountId(accountId);
    if (!user) {
      const session = ctx.session as SessionData;
      const rawPayload = ctx.startPayload;
      session.referral =
        rawPayload && /^\d+$/.test(rawPayload) ? BigInt(rawPayload) : null;
      await ctx.scene.enter("userInit");
    }
  } catch (error) {
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

    userActionsLogger(
      "error",
      "handleStart",
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /start: ${(error as Error).message}`,
      { accountId, username }
    );
  }
};
