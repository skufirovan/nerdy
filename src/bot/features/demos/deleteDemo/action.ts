import { Markup, Telegraf } from "telegraf";
import { MyContext } from "../../scenes";
import { DemoController } from "@controller";
import { DELETE_DEMO_BUTTON } from "./keyboard";
import { extractDemoNameFromCaption } from "../utils";
import { handleError, hasCaption } from "@utils/index";

export const deleteDemoAction = (bot: Telegraf<MyContext>) => {
  bot.action(DELETE_DEMO_BUTTON.DELETE_DEMO.callback, async (ctx) => {
    try {
      await ctx.answerCbQuery();

      const message = ctx.update.callback_query.message;
      const caption = hasCaption(message) ? message.caption : undefined;

      if (!caption) return await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–º–∫—É");

      const demoName = extractDemoNameFromCaption(caption);
      if (!demoName) return await ctx.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");

      return await ctx.reply(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–µ–º–∫—É <b>${demoName}</b>?`, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          Markup.button.callback("‚úÖ –î–∞", `CONFIRM_DELETE_DEMO_${demoName}`),
          Markup.button.callback("‚ùå –ù–µ—Ç", "DELETE_MESSAGE"),
        ]).reply_markup,
      });
    } catch (error) {
      await handleError(ctx, error, "deleteDemoAction");
    }
  });

  bot.action(/^CONFIRM_DELETE_DEMO_(.+)$/, async (ctx) => {
    try {
      await ctx.answerCbQuery();

      const demoName = ctx.match[1];
      const accountId = ctx.user!.accountId;

      await DemoController.delete(accountId, demoName);

      return await ctx.reply(`üôéüèø‚Äç‚ôÇÔ∏è –î–µ–º–∫–∞ <b>${demoName}</b> —É–¥–∞–ª–µ–Ω–∞`, {
        parse_mode: "HTML",
      });
    } catch (error) {
      await handleError(ctx, error, "deleteDemoAction_confirm");
    }
  });
};
