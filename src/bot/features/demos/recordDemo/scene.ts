import path from "path";
import { Scenes } from "telegraf";
import { MyContext, SessionData } from "../../scenes";
import {
  DemoController,
  UserController,
  EquipmentController,
} from "@controller";
import { UserDto } from "@domain/dtos";
import { getRandomImage, requireUser, handleError } from "@utils/index";
import { SECTION_EMOJI } from "@utils/constants";

export const recordDemoScene = new Scenes.BaseScene<MyContext>("recordDemo");

recordDemoScene.enter(async (ctx: MyContext) => {
  try {
    const accountId = ctx.user!.accountId;
    const session = ctx.session as SessionData;

    const { canRecord, remainingTimeText } = await DemoController.canRecord(
      accountId
    );

    if (!canRecord) {
      const imagePath = await getRandomImage(
        path.resolve(__dirname, `../../../assets/images/REMAINING`),
        path.resolve(__dirname, `../../../assets/images/REMAINING/1.jpg`)
      );
      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: `‚òÅÔ∏è –¢—ã —É–∂–µ –Ω–∞–¥—Ä–∏—Å—Ç–∞–ª —Å—Ç–∏–ª—è, –±—Ä–∞—á–æ, –ø—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ ${remainingTimeText!}`,
        }
      );
      return ctx.scene.leave();
    }

    session.demo = {};
    const firstVideoPath = path.resolve(
      __dirname,
      "../../../assets/videos/DEMO_1.gif"
    );

    await ctx.replyWithAnimation(
      { source: firstVideoPath },
      {
        caption:
          "üìÄ –§–∞–∞, —Å–¥–µ–ª–∞–ª –¥–µ–ª–æ ‚Äî —Ä—ç–ø—É–π —Å–º–µ–ª–æ. –ù–∞–∫–∏–¥–∞–π –±–∞—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Ñ–∞–π–ª",
      }
    );
  } catch (error) {
    await handleError(ctx, error, "recordDemoScene.enter");
    return ctx.scene.leave();
  }
});

recordDemoScene.on("message", async (ctx: MyContext) => {
  const accountId = ctx.user!.accountId;
  const session = ctx.session as SessionData;
  const message = ctx.message;

  if (!message) {
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏—Ñ–∞–π–ª");
  }

  try {
    const user = await requireUser(ctx);
    if (!user) return ctx.scene.leave();

    if (!session.demo!.text && !session.demo!.fileId) {
      if ("text" in message) {
        session.demo!.text = message.text.trim();
      } else if ("audio" in message) {
        const file = message.audio;
        session.demo!.fileId = file.file_id;
      } else {
        return await ctx.reply(
          "ü¶∏üèø –ß–µ —Ç—ã –º–Ω–µ –ø—ã—Ç–∞–µ—à—å—Å—è –≤–ø–∞—Ä–∏—Ç—å, –Ω–∏–≥–≥–µ—Ä, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ"
        );
      }

      const secondVideoPath = path.resolve(
        __dirname,
        "../../../assets/videos/DEMO_2.gif"
      );

      return await ctx.replyWithAnimation(
        { source: secondVideoPath },
        {
          caption:
            "üí™üèø –ë–∞–∑–∞—Ä—É –Ω–µ—Ç, —Ç—ã –Ω–µ–º–æ—â—å. –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–º–∫–∏, –æ–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è!",
        }
      );
    }

    if (!session.demo!.name && "text" in message) {
      session.demo!.name = message.text.trim();

      const name = session.demo!.name;
      const text = session.demo!.text || null;
      const fileId = session.demo!.fileId || null;

      const equipment = await EquipmentController.findUserEquipped(accountId);
      const equipmentMultiplier = equipment.reduce(
        (acc, item) => acc * item.equipment.multiplier,
        1
      );
      const levelMultiplier = 1 + user.level / 100;

      const baseFameReward = user.hasPass ? 400 : 300;
      const baseRacksReward = user.hasPass ? 400 : 300;

      const fameReward = Math.floor(
        baseFameReward * equipmentMultiplier * levelMultiplier
      );
      const racksReward = Math.floor(
        baseRacksReward * equipmentMultiplier * levelMultiplier
      );

      await DemoController.create(accountId, name, text, fileId);
      await UserController.updateUserInfo(accountId, {
        racks: user.racks + racksReward,
      });

      const imagePath = await getRandomImage(
        path.resolve(__dirname, `../../../assets/images/DEMO`),
        path.resolve(__dirname, `../../../assets/images/DEMO/1.jpg`)
      );

      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: `üßñüèø –î–µ–º–æ—á–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, —Ç—ã –ø–æ–ª—É—á–∏–ª +${fameReward} —Ñ–µ–π–º–∞ –∏ +${racksReward} —Ä–µ–∫—Å–æ–≤`,
        }
      );

      await updateUserRewards(ctx, user, accountId, fameReward, racksReward);

      delete session.demo;
      return ctx.scene.leave();
    }

    await ctx.reply("ü¶∏üèø –ß–µ —Ç—ã –º–Ω–µ –ø—ã—Ç–∞–µ—à—å—Å—è –≤–ø–∞—Ä–∏—Ç—å, –Ω–∏–≥–≥–µ—Ä, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ");
  } catch (error) {
    await handleError(ctx, error, "recordDemoScene.on");
    return ctx.scene.leave();
  }
});

async function updateUserRewards(
  ctx: MyContext,
  user: UserDto,
  accountId: bigint,
  fameReward: number,
  racksReward: number
) {
  const updatedUser = await UserController.addFame(accountId, fameReward);

  if (user.level !== updatedUser.level) {
    const racksGained = updatedUser.racks - user.racks - racksReward;
    await ctx.reply(
      `${SECTION_EMOJI} –£—Ä–æ–≤–µ–Ω—å —Å–≤–∞–≥–∏ –ø–æ–¥—Ä–æ—Å, —Ç—ã –∑–∞–ª—É—Ç–∞–ª +${racksGained} —Ä–µ–∫—Å–æ–≤`
    );
  }
}
