import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "../scenes";
import { UserController } from "@controller";
import { mainKeyboard } from "@bot/handlers/handleStart/keyboard";
import { ValidationError, validate, handleError } from "@utils/index";

export const userInitScene = new Scenes.BaseScene<MyContext>("userInit");

userInitScene.enter(async (ctx: MyContext) => {
  try {
    const accountId = ctx.user!.accountId;
    const user = await UserController.findByAccountId(accountId);

    if (!user) {
      await ctx.reply(
        "üë®üèø‚Äçüè´ –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º. –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫–∞\n‚ûñ –ü–æ—Å–ø–µ—à–∏—à—å ‚Äì –æ–ø–ø–æ–≤ –Ω–∞—Å–º–µ—à–∏—à—å, –ø–æ–¥–æ–π–¥–∏ –∫ —ç—Ç–æ–º—É —Å —É–º–æ–º"
      );
    }
  } catch (error) {
    await handleError(ctx, error, "userInitScene.enter");
    return ctx.scene.leave();
  }
});

userInitScene.on(message("text"), async (ctx: MyContext) => {
  if (!ctx.message || !("text" in ctx.message))
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¢–ï–ö–°–¢ #–¢–ï–ö–°–¢");

  try {
    const accountId = ctx.user!.accountId;
    const username = ctx.user!.username;

    const user = await UserController.findByAccountId(accountId);

    if (!user) {
      const nickname = ctx.message.text.trim();

      const validation = validate(nickname);

      if (!validation.isValid) {
        const errorMessages: Record<ValidationError, string> = {
          TOO_SHORT: "–ù–∏–∫ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä—è–º –∫–∞–∫ —Ç–≤–æ–π..",
          TOO_LONG: "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤)",
          INVALID_CHARS: "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _-.,!?",
        };

        return await ctx.reply(
          `‚ö†Ô∏è ${errorMessages[validation.error!]}\n‚ûñ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ`
        );
      }

      const existedNickname = await UserController.findByNickname(
        accountId,
        nickname
      );

      if (existedNickname) {
        return await ctx.reply(
          `‚ùå –û–ø–ø—ã –±—ã–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ –∑–∞–Ω—è–ª–∏ —ç—Ç–æ—Ç –Ω–∏–∫, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç`
        );
      }

      const session = ctx.session as SessionData;
      const referralId = session.referral ?? null;

      await UserController.register(accountId, username, nickname, referralId);

      await ctx.reply(`‚òÅÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫ <b>${nickname}</b>`, {
        parse_mode: "HTML",
        reply_markup: mainKeyboard.reply_markup,
      });
    } else if (user.username !== username) {
      await UserController.updateUserInfo(accountId, { username });
    }

    return ctx.scene.leave();
  } catch (error) {
    await handleError(ctx, error, "userInitScene.on");
    return ctx.scene.leave();
  }
});
