import path from "path";
import { Scenes } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "../scenes";
import {
  DemoController,
  UserController,
  UserEquipmentController,
} from "@controller";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";
import { getRandomImage } from "@utils/index";

export const recordDemoScene = new Scenes.BaseScene<MyContext>("recordDemo");

recordDemoScene.enter(async (ctx: MyContext) => {
  const session = ctx.session as SessionData;

  try {
    const { canRecord, remainingTimeText } = await DemoController.canRecord(
      ctx.user!.accountId
    );
    if (!canRecord) {
      const imagePath = await getRandomImage(
        path.resolve(__dirname, `../../assets/images/REMAINING`),
        path.resolve(__dirname, `../../assets/images/REMAINING/1.jpg`)
      );
      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: `‚òÅÔ∏è –¢—ã —É–∂–µ –Ω–∞–¥—Ä–∏—Å—Ç–∞–ª —Å—Ç–∏–ª—è, –±—Ä–∞—á–æ, –ø—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ ${remainingTimeText!}`,
        }
      );
      return await ctx.scene.leave();
    }

    session.demo = {};
    const firstVideoPath = path.resolve(
      __dirname,
      "../../assets/videos/DEMO_1.gif"
    );
    await ctx.replyWithAnimation(
      { source: firstVideoPath },
      { caption: "üìÄ –§–∞–∞, —Å–¥–µ–ª–∞–ª –¥–µ–ª–æ ‚Äî —Ä—ç–ø—É–π —Å–º–µ–ª–æ. –ù—É-–∫–∞ –Ω–∞–∫–∏–¥–∞–π –±–∞—Ä–æ–≤" }
    );
  } catch (error) {
    userActionsLogger(
      "error",
      "recordDemoScene",
      `${(error as Error).message}`,
      { accountId: ctx.user!.accountId }
    );
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");
    await ctx.scene.leave();
  }
});

recordDemoScene.on(message("text"), async (ctx: MyContext) => {
  const session = ctx.session as SessionData;
  const user = ctx.user;
  const amount = 500;
  const msg = ctx.message as Message.TextMessage;

  if (!session.demo!.text) {
    session.demo!.text = msg.text.trim();
    const secondVideoPath = path.resolve(
      __dirname,
      "../../assets/videos/DEMO_2.gif"
    );
    return await ctx.replyWithAnimation(
      { source: secondVideoPath },
      {
        caption:
          "üí™üèø –ë–∞–∑–∞—Ä—É –Ω–µ—Ç, —Ç—ã –Ω–µ–º–æ—â—å. –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–º–∫–∏, –æ–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è!",
      }
    );
  }

  if (!session.demo!.name) {
    session.demo!.name = msg.text.trim();

    const name = session.demo!.name;
    const text = session.demo!.text;

    try {
      const equipment = await UserEquipmentController.findEquipped(
        user!.accountId
      );
      const multiplier = equipment.reduce(
        (acc, item) => acc * item.equipment.multiplier,
        1
      );
      const imagePath = await getRandomImage(
        path.resolve(__dirname, `../../assets/images/DEMO`),
        path.resolve(__dirname, `../../assets/images/DEMO/1.jpg`)
      );
      await DemoController.create(user!.accountId, name, text);
      await UserController.addFame(user!.accountId, amount * multiplier);
      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: `üßñüèø –î–µ–º–æ—á–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, —Ç—ã –ø–æ–ª—É—á–∏–ª +${
            amount * multiplier
          } —Ñ–µ–π–º–∞`,
        }
      );
    } catch (error) {
      userActionsLogger(
        "error",
        "recordDemoScene",
        `${(error as Error).message}`,
        { accountId: user!.accountId }
      );
      await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ–º–∫–∏");
      return await ctx.scene.leave();
    }

    delete session.demo;
    await ctx.scene.leave();
  }
});
