import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "@bot/features/scenes";
import { UserController, SquadController } from "@controller";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";
import { SECTION_EMOJI } from "@utils/constants";

export const inviteMemberScene = new Scenes.BaseScene<MyContext>(
  "inviteMember"
);

inviteMemberScene.enter(async (ctx: MyContext) => {
  await ctx.reply(`${SECTION_EMOJI} –í–≤–µ–¥–∏ –Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞`);
});

inviteMemberScene.on(message("text"), async (ctx: MyContext) => {
  if (!ctx.message || !("text" in ctx.message)) {
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¢–ï–ö–°–¢ #–¢–ï–ö–°–¢");
  }

  const accountId = ctx.user!.accountId;
  const session = ctx.session as SessionData;
  const newMemberNickname = ctx.message.text.trim();

  if (!session.squadData) {
    await ctx.reply("üö´ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
    return await ctx.scene.leave();
  }

  try {
    const newMember = await UserController.findByNickname(
      accountId,
      newMemberNickname
    );

    if (!newMember) {
      await ctx.reply(`‚ùå <b>${newMemberNickname}</b> —ç—Ç–æ –≤–æ–æ–±—â–µ –ö–¢–û?`, {
        parse_mode: "HTML",
      });
      return await ctx.scene.leave();
    }

    const existMembership = await SquadController.findMembershipByUserId(
      newMember.accountId
    );

    if (existMembership) {
      await ctx.reply(`‚ùå <b>${newMemberNickname}</b> —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–µ–π–±–ª`, {
        parse_mode: "HTML",
      });
      return await ctx.scene.leave();
    }

    ctx.telegram.sendMessage(
      String(newMember.accountId),
      `${SECTION_EMOJI} –¢–µ–±—è —Ö–æ—Ç—è—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –ª–µ–π–±–ª <b>${session.squadData.name}</b>`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data: `SQUAD_INVITE_ACCEPT_${session.squadData.name}_${session.squadData.requesterId}_${newMember.accountId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `SQUAD_INVITE_DECLINE`,
              },
            ],
          ],
        },
      }
    );
    await ctx.reply(
      `‚úçüèø <b>${newMemberNickname}</b> –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–µ—Ç –¥–æ–≥–æ–≤–æ—Ä..`,
      { parse_mode: "HTML" }
    );
    await ctx.scene.leave();
  } catch (error) {
    userActionsLogger(
      "error",
      "inviteMemberScene",
      `${(error as Error).message}`,
      { accountId }
    );
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});
