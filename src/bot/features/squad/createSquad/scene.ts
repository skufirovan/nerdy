import { Scenes } from "telegraf";
import { MyContext, SessionData } from "@bot/features/scenes";
import { SquadController } from "@controller/index";
import { ValidationError, validate, handleError } from "@utils/index";
import { SECTION_EMOJI } from "@utils/constants";

export const createSquadScene = new Scenes.BaseScene<MyContext>("createSquad");

createSquadScene.enter(async (ctx: MyContext) => {
  await ctx.reply("üë®üèø‚Äçüè´ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è");
});

createSquadScene.on("message", async (ctx: MyContext) => {
  const accountId = ctx.user!.accountId;

  try {
    const session = ctx.session as SessionData;
    const message = ctx.message;

    if (message && "text" in message && !session.createSquad?.name) {
      const name = message.text.trim();
      const validation = validate(name);

      if (!validation.isValid) {
        const errorMessages: Record<ValidationError, string> = {
          TOO_SHORT: "–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
          TOO_LONG: "–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤",
          INVALID_CHARS: "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _-.,!?",
        };
        return await ctx.reply(
          `‚ö†Ô∏è ${errorMessages[validation.error!]}\n‚ûñ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ`
        );
      }

      const existed = await SquadController.findSquadByName(accountId, name);
      if (existed) {
        return await ctx.reply(
          `‚ùå –û–ø–ø—ã –±—ã–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ –∑–∞–Ω—è–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç`
        );
      }

      session.createSquad = { name };
      await ctx.reply(`ü¶∏üèø –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ª–µ–π–±–ª–∞`);
    }

    if (message && "photo" in message && session.createSquad?.name) {
      const squadName = session.createSquad.name;
      const photo = message.photo.at(-1);
      const fileId = photo!.file_id;
      const fileLink = await ctx.telegram.getFileLink(photo!.file_id);

      if (!fileLink.href.startsWith("http")) {
        throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ ${fileLink.href}`);
      }

      await SquadController.createSquad(
        accountId,
        squadName,
        fileId,
        fileLink.href
      );

      await ctx.reply(
        `${SECTION_EMOJI} –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–µ–±—ã–≤–∞—Ç—å –Ω–∞ —Ä–æ—è–ª—Ç–∏`
      );
      delete session.createSquad;
      return ctx.scene.leave();
    }
  } catch (error) {
    await handleError(ctx, error, "createSquadScene.on");
    return ctx.scene.leave();
  }
});
