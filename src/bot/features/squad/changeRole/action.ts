import { Telegraf, Markup } from "telegraf";
import { MyContext, SessionData } from "@bot/features/scenes";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";
import { toButton } from "@utils/index";
import { SECTION_EMOJI } from "@utils/constants";

export const changeSquadMemberRoleAction = (bot: Telegraf<MyContext>) => {
  bot.action(/^PRE-CHANGE_ROLE_(.+)$/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const squadName = ctx.match[1];

      const PRE_CHANGE_ROLE_BUTTONS = {
        CHANGE_ROLE: {
          text: "üë®üèø‚Äçüíº –ü–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—å",
          callback: `CHANGE_ROLE_${squadName}`,
        },
        INFO: {
          text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
          callback: "PRE_CHANGE_ROLE_INFO",
        },
      };

      const preChangeRoleKeyboard = Markup.inlineKeyboard([
        [toButton(PRE_CHANGE_ROLE_BUTTONS.CHANGE_ROLE)],
        [toButton(PRE_CHANGE_ROLE_BUTTONS.INFO)],
      ]);

      await ctx.reply(
        `${SECTION_EMOJI} –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–≥–ª—è–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>`,
        {
          parse_mode: "HTML",
          reply_markup: preChangeRoleKeyboard.reply_markup,
        }
      );
    } catch (error) {
      userActionsLogger(
        "error",
        "changeSquadMemberRoleAction",
        `${(error as Error).message}`,
        { accountId: ctx.user!.accountId }
      );
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });

  bot.action(/^CHANGE_ROLE_(.+)$/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const session = ctx.session as SessionData;
      session.squadData = {
        requesterId: ctx.user!.accountId,
        name: ctx.match[1],
      };
      await ctx.scene.enter("changeSquadMemberRole");
    } catch (error) {
      userActionsLogger(
        "error",
        "changeSquadMemberRoleAction_change",
        `${(error as Error).message}`,
        { accountId: ctx.user!.accountId }
      );
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });

  bot.action("PRE_CHANGE_ROLE_INFO", async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const text = [
        "üë®üèø‚Äç‚úàÔ∏è <b>CEO</b>",
        "‚ûñ –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –ª–µ–π–±–ª–∞",
        "‚ûñ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å: –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª–µ–π–±–ª",
        "‚ùóÔ∏è –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ <b>CEO</b>, —Ç—ã —Å—Ç–∞–Ω–µ—à—å <b>–ü–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–º</b>\n",
        "üïµüèø‚Äç‚ôÇÔ∏è <b>A&R –ú–µ–Ω–µ–¥–∂–µ—Ä</b>",
        "‚ûñ –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–µ–π–±–ª",
        "‚ûñ –ù–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–µ–π–±–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–∞–≤\n",
        "üë®üèø‚Äçüåæ <b>–ü–æ–¥–ø–∏—Å–∞–Ω—Ç</b>",
        "‚ûñ –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "‚ûñ –ú–æ–∂–µ—Ç –≤—ã–ø—É—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É, –Ω–æ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–µ–π–±–ª–æ–º",
      ];

      await ctx.reply(text.join("\n"), { parse_mode: "HTML" });
    } catch (error) {
      userActionsLogger(
        "error",
        "changeSquadMemberRoleAction_info",
        `${(error as Error).message}`,
        { accountId: ctx.user!.accountId }
      );
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });
};
