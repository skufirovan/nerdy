import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "@bot/features/scenes";
import { UserController, SquadController } from "@controller";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";
import { SECTION_EMOJI } from "@utils/constants";

export const changeSquadMemberRoleScene = new Scenes.BaseScene<MyContext>(
  "changeSquadMemberRole"
);

changeSquadMemberRoleScene.enter(async (ctx: MyContext) => {
  await ctx.reply(`${SECTION_EMOJI} –í–≤–µ–¥–∏ –Ω–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ª–µ–π–±–ª–∞`);
});

changeSquadMemberRoleScene.on(message("text"), async (ctx: MyContext) => {
  if (!ctx.message || !("text" in ctx.message)) {
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¢–ï–ö–°–¢ #–¢–ï–ö–°–¢");
  }

  const msg = ctx.message.text.trim();
  const accountId = ctx.user!.accountId;
  const session = ctx.session as SessionData;
  const squadData = session.squadData;

  if (!squadData) {
    await ctx.reply("üö´ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
    return await ctx.scene.leave();
  }

  const roleMap: Record<string, "ADMIN" | "RECRUITER" | "MEMBER"> = {
    ceo: "ADMIN",
    ar: "RECRUITER",
    –ø–æ–¥–ø–∏—Å–∞–Ω—Ç: "MEMBER",
  };

  try {
    if (!squadData.targetUser?.accountId) {
      const member = await UserController.findByNickname(accountId, msg);

      if (!member) {
        await ctx.reply(`‚ùå <b>${msg}</b> —ç—Ç–æ –≤–æ–æ–±—â–µ –ö–¢–û?`, {
          parse_mode: "HTML",
        });
        return await ctx.scene.leave();
      }

      const existMembership = await SquadController.findMembershipByUserId(
        member.accountId
      );

      if (!existMembership || existMembership.squadName !== squadData.name) {
        await ctx.reply(`‚ùå <b>${msg}</b> –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–≤–æ–π –ª–µ–π–±–ª`, {
          parse_mode: "HTML",
        });
        return await ctx.scene.leave();
      }

      squadData.targetUser = { accountId: member.accountId };
      const text = [
        `${SECTION_EMOJI} –ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è <b>${msg}</b>\n`,
        "‚ñ´Ô∏è <code>CEO</code> ‚Äî –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞",
        "‚ñ´Ô∏è <code>AR</code> ‚Äî –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å",
        "‚ñ´Ô∏è <code>–ü–æ–¥–ø–∏—Å–∞–Ω—Ç</code> ‚Äî –ü—Ä–æ—Å—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫",
      ];
      return await ctx.reply(text.join("\n"), { parse_mode: "HTML" });
    }

    const normalizedMsg = msg.toLowerCase();

    const intendedRole = roleMap[normalizedMsg];

    if (!intendedRole) {
      await ctx.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ", {
        parse_mode: "HTML",
      });
      return await ctx.scene.leave();
    }

    if (intendedRole === "ADMIN") {
      await SquadController.transferOwnership(
        accountId,
        squadData.name!,
        squadData.targetUser!.accountId
      );
    } else {
      await SquadController.changeMemberRole(
        accountId,
        squadData.name!,
        squadData.targetUser!.accountId,
        intendedRole
      );
    }

    await ctx.reply(`${SECTION_EMOJI} –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>${msg}</b>`, {
      parse_mode: "HTML",
    });
    await ctx.scene.leave();
  } catch (error) {
    userActionsLogger(
      "error",
      "changeSquadMemberRoleScene",
      `${error as Error}`,
      { accountId }
    );
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});
