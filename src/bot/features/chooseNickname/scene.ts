import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "../scenes";
import { mainKeyboard } from "@bot/handlers/handleStart/keyboard";
import { UserController } from "@controller";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";
import { NicknameError, validateNickname } from "@utils/index";

const chooseNicknameScene = new Scenes.BaseScene<MyContext>("chooseNickname");

chooseNicknameScene.enter(async (ctx: MyContext) => {
  await ctx.reply(
    "üë®üèø‚Äçüè´ –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º. –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫–∞\n‚ûñ –ü–æ—Å–ø–µ—à–∏—à—å ‚Äì –æ–ø–ø–æ–≤ –Ω–∞—Å–º–µ—à–∏—à—å, –ø–æ–¥–æ–π–¥–∏ –∫ —ç—Ç–æ–º—É —Å —É–º–æ–º"
  );
});

chooseNicknameScene.on(message("text"), async (ctx: MyContext) => {
  if (!ctx.message || !("text" in ctx.message)) {
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¢–ï–ö–°–¢ #–¢–ï–ö–°–¢");
  }

  const nickname = ctx.message.text.trim();
  const session = ctx.session as SessionData;

  const validation = validateNickname(nickname);
  if (!validation.isValid) {
    const errorMessages: Record<NicknameError, string> = {
      TOO_SHORT: "–ù–∏–∫ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä—è–º –∫–∞–∫ —Ç–≤–æ–π..",
      TOO_LONG: "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤)",
      INVALID_CHARS: "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _-.,!?",
    };

    return await ctx.reply(
      `‚ö†Ô∏è ${errorMessages[validation.error!]}\n‚ûñ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ`
    );
  }

  try {
    const existedUser = await UserController.findByNickname(
      ctx.user!.accountId,
      nickname
    );

    if (existedUser) {
      return await ctx.reply(
        `‚ùå –û–ø–ø—ã –±—ã–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ –∑–∞–Ω—è–ª–∏ —ç—Ç–æ—Ç –Ω–∏–∫, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç`
      );
    }

    session.nickname = nickname;

    await ctx.reply(`‚òÅÔ∏è –¢–µ–ø–µ—Ä—å –≤ —Å–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ`, mainKeyboard);
    return ctx.scene.leave();
  } catch (error) {
    userActionsLogger(
      "error",
      "chooseNicknameScene",
      `${(error as Error).message}`,
      { accountId: ctx.user!.accountId }
    );
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

export default chooseNicknameScene;
