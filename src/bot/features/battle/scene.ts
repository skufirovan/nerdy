import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "../scenes";
import { UserController } from "@controller";
import { battleManager, battleTimeoutService } from "@core/GameLogic/battle";
import { UserDto } from "@domain/dtos";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";

export const battleScene = new Scenes.BaseScene<MyContext>("battle");

battleScene.enter(async (ctx: MyContext) => {
  if ((ctx.session as SessionData).battleId) {
    await ctx.reply(`üë®üèª‚Äçü¶≤ –¢—ã —É–∂–µ –±–∞—Ç—Ç–ª–∏—à—å—Å—è`);
    return ctx.scene.leave();
  }
  const user = ctx.user as UserDto;
  await ctx.reply(`üë®üèª‚Äçü¶≤ –ú–° —Å–ø—Ä–∞–≤–∞ ‚Äî ${user.nickname}, –≤–≤–µ–¥–∏ –Ω–∏–∫ –ú–° —Å–ª–µ–≤–∞`);
});

battleScene.on(message("text"), async (ctx: MyContext) => {
  if (!ctx.message || !("text" in ctx.message)) {
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¢–ï–ö–°–¢ #–¢–ï–ö–°–¢");
  }
  const player2Nickname = ctx.message.text.trim();

  try {
    const user = await UserController.findByAccountId(ctx.user!.accountId);
    const user2 = await UserController.findByNickname(
      user!.accountId,
      player2Nickname
    );

    if (!user2) {
      await ctx.reply("‚ùå –ú–° —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return await ctx.scene.leave();
    }
    if (user2.accountId === user!.accountId) {
      return await ctx.reply("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è");
    }

    const battle = battleManager.createBattle({
      accountId: user!.accountId,
      username: user!.username,
      ctx,
    });
    battleTimeoutService.startInvitationTimeout(battle.id, async () => {
      await ctx.reply("‚è∞ –ú–° —Å–ª–µ–≤–∞ —Å–ª–æ—É–ø–æ–∫..");
      return ctx.scene.leave();
    });
    (ctx.session as SessionData).battleId = battle.id;

    await ctx.telegram.sendMessage(
      String(user2.accountId),
      `üé§ –ú–° ${user!.nickname} –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é —á–æ—Ç–∫–æ—Å—Ç—å –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚ùå–°–ª–∏—Ç—å—Å—è",
                callback_data: `BATTLE_DECLINE_${battle.id}`,
              },
              {
                text: "üî•–í—ã—Å–∫–æ—á–∏—Ç—å",
                callback_data: `BATTLE_ACCEPT_${battle.id}`,
              },
            ],
          ],
        },
      }
    );
    await ctx.reply(`‚úÖ –ú–° ${user2.nickname} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ..`);
  } catch (error) {
    userActionsLogger(
      "error",
      "battleScene",
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –Ω–∞ –±–∞—Ç—Ç–ª –∏–≥—Ä–æ–∫–∞ ${player2Nickname}: ${
        (error as Error).message
      }`,
      { accountId: ctx.user!.accountId }
    );
    return await ctx.reply(
      "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–Ω–∏ –±–∞—Ç—Ç–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
    );
  }

  await ctx.scene.leave();
});
