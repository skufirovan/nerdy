import path from "path";
import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { MyContext, SessionData } from "../scenes";
import { UserController } from "@controller/index";
import { battleManager, battleTimeoutService } from "@core/GameLogic/battle";
import { getRandomImage, requireUser, handleError } from "@utils/index";
import {
  SECTION_EMOJI,
  FAME_TO_BATTLE,
  RACKS_TO_BATTLE,
} from "@utils/constants";

export const battleScene = new Scenes.BaseScene<MyContext>("battle");

battleScene.enter(async (ctx: MyContext) => {
  try {
    const user = await requireUser(ctx);

    if (!user) return ctx.scene.leave();

    const session = ctx.session as SessionData;

    if (session.battleId) {
      await ctx.reply(`${SECTION_EMOJI} –¢—ã —É–∂–µ –±–∞—Ç—Ç–ª–∏—à—å—Å—è`);
      return ctx.scene.leave();
    }

    const imagePath = await getRandomImage(
      path.resolve(__dirname, `../../assets/images/BATTLE`),
      path.resolve(__dirname, `../../assets/images/BATTLE/1.jpg`)
    );
    await ctx.replyWithPhoto(
      { source: imagePath },
      {
        caption: `${SECTION_EMOJI} –ú–° —Å–ø—Ä–∞–≤–∞ ‚Äî <b>${user.nickname}</b>, –≤–≤–µ–¥–∏ –Ω–∏–∫ –ú–° —Å–ª–µ–≤–∞\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 500 —Ñ–µ–π–º–∞ –∏ 300 —Ä–µ–∫—Å–æ–≤ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ`,
        parse_mode: "HTML",
      }
    );
  } catch (error) {
    await handleError(ctx, error, "battleScene.enter");
    return ctx.scene.leave();
  }
});

battleScene.on(message("text"), async (ctx: MyContext) => {
  if (!ctx.message || !("text" in ctx.message))
    return await ctx.reply("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¢–ï–ö–°–¢ #–¢–ï–ö–°–¢");

  const accountId = ctx.user!.accountId;
  const nickname = ctx.message.text.trim();

  try {
    const user = await UserController.findByAccountId(accountId);
    const user2 = await UserController.findByNickname(accountId, nickname);

    if (!user2) {
      await ctx.reply("‚ùå –ú–° —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return ctx.scene.leave();
    }

    if (user2.seasonalFame < FAME_TO_BATTLE || user2.racks < RACKS_TO_BATTLE) {
      await ctx.reply(`‚ùå <b>${user2.nickname}</b> —Å–ª–∏—à–∫–æ–º –ª–µ–π–º..`, {
        parse_mode: "HTML",
      });
      return ctx.scene.leave();
    }

    if (battleManager.getBattleByPlayer(user2.accountId)) {
      await ctx.reply("‚ùå <b>${user2.nickname}</b> —É–∂–µ –±–∞—Ç—Ç–ª–∏—Ç—Å—è");
      return ctx.scene.leave();
    }

    if (user2.accountId === user!.accountId) {
      await ctx.reply("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è");
      return ctx.scene.leave();
    }

    const battle = battleManager.createBattle({
      accountId: user!.accountId,
      username: user!.username,
      ctx,
    });

    battleTimeoutService.startInvitationTimeout(battle.id, async () => {
      await ctx.reply("‚è∞ –ú–° —Å–ª–µ–≤–∞ —Å–ª–æ—É–ø–æ–∫..");
      return ctx.scene.leave();
    });

    await ctx.telegram.sendMessage(
      String(user2.accountId),
      `üé§ –ú–° ${user!.nickname} –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é —á–æ—Ç–∫–æ—Å—Ç—å –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚ùå–°–ª–∏—Ç—å—Å—è",
                callback_data: `BATTLE_DECLINE_${battle.id}`,
              },
              {
                text: "üî•–í—ã—Å–∫–æ—á–∏—Ç—å",
                callback_data: `BATTLE_ACCEPT_${battle.id}`,
              },
            ],
          ],
        },
      }
    );

    await ctx.reply(`ü§úüèø –ú–° ${user2.nickname} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ..`);
    return ctx.scene.leave();
  } catch (error) {
    await handleError(ctx, error, "battleScene.on");
    return ctx.scene.leave();
  }
});
